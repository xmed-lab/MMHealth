# !/usr/bin/env python
# -*-coding:utf-8 -*-

"""
# File       : unitrans.py
# Time       ：5/11/2024 2:53 pm
# Author     ：Chuang Zhao
# version    ：python 
# Description：# 联合Transformer， refer to https://github.com/thu-ml/unidiffuser/blob/main/libs/uvit_multi_post_ln_v1.py
https://stackoverflow.com/questions/78641150/a-module-that-was-compiled-using-numpy-1-x-cannot-be-run-in-numpy-2-0-0
https://blog.csdn.net/woai8339/article/details/131250283 (直接退出的妈的用conda装)
https://blog.csdn.net/BigerBang/article/details/139685883
conda install pytorch==2.1.1 torchvision==0.16.1 torchaudio==2.1.1 pytorch-cuda=12.1 -c pytorch -c nvidia
pip3 install xformers==0.0.23
还是得python rather THan 3

"""
import math
import faiss
import warnings
import torch
import torch.nn as nn
import einops
import torch.utils.checkpoint
import torch.nn.functional as F
from .auto import ContextEncoder, VisitEncode
import numpy as np

if hasattr(torch.nn.functional, 'scaled_dot_product_attention'):
    ATTENTION_MODE = 'flash'
else:
    try:
        import xformers
        import xformers.ops
        ATTENTION_MODE = 'xformers'
    except:
        ATTENTION_MODE = 'math'
# print(f'attention mode is {ATTENTION_MODE}')



def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0., training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).

    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.

    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


def timestep_embedding(timesteps, dim, max_period=10000):
    """
    Create sinusoidal timestep embeddings.

    :param timesteps: a 1-D Tensor of N indices, one per batch element.
                      These may be fractional.
    :param dim: the dimension of the output.
    :param max_period: controls the minimum frequency of the embeddings.
    :return: an [N x dim] Tensor of positional embeddings.
    """
    half = dim // 2
    freqs = torch.exp(
        -math.log(max_period) * torch.arange(start=0, end=half, dtype=torch.float32) / half
    ).to(device=timesteps.device)
    args = timesteps[:, None].float() * freqs[None]
    embedding = torch.cat([torch.cos(args), torch.sin(args)], dim=-1)
    if dim % 2:
        embedding = torch.cat([embedding, torch.zeros_like(embedding[:, :1])], dim=-1)
    return embedding


def patchify(imgs, patch_size):
    x = einops.rearrange(imgs, 'B C (h p1) (w p2) -> B (h w) (p1 p2 C)', p1=patch_size, p2=patch_size)
    return x


def unpatchify(x, channels=3):
    patch_size = int((x.shape[2] // channels) ** 0.5)
    h = w = int(x.shape[1] ** .5)
    assert h * w == x.shape[1] and patch_size ** 2 * channels == x.shape[2]
    x = einops.rearrange(x, 'B (h w) (p1 p2 C) -> B C (h p1) (w p2)', h=h, p1=patch_size, p2=patch_size)
    return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, L, C = x.shape

        qkv = self.qkv(x)
        if ATTENTION_MODE == 'flash':
            qkv = einops.rearrange(qkv, 'B L (K H D) -> K B H L D', K=3, H=self.num_heads).float()
            q, k, v = qkv[0], qkv[1], qkv[2]  # B H L D
            x = torch.nn.functional.scaled_dot_product_attention(q, k, v)
            x = einops.rearrange(x, 'B H L D -> B L (H D)')
        elif ATTENTION_MODE == 'xformers':
            qkv = einops.rearrange(qkv, 'B L (K H D) -> K B L H D', K=3, H=self.num_heads)
            q, k, v = qkv[0], qkv[1], qkv[2]  # B L H D
            x = xformers.ops.memory_efficient_attention(q, k, v)
            x = einops.rearrange(x, 'B L H D -> B L (H D)', H=self.num_heads)
        elif ATTENTION_MODE == 'math':
            qkv = einops.rearrange(qkv, 'B L (K H D) -> K B H L D', K=3, H=self.num_heads)
            q, k, v = qkv[0], qkv[1], qkv[2]  # B H L D
            attn = (q @ k.transpose(-2, -1)) * self.scale
            attn = attn.softmax(dim=-1)
            attn = self.attn_drop(attn)
            x = (attn @ v).transpose(1, 2).reshape(B, L, C)
        else:
            raise NotImplemented

        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None,
                 act_layer=nn.GELU, norm_layer=nn.LayerNorm, skip=False, use_checkpoint=False):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale)
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer)
        self.skip_linear = nn.Linear(2 * dim, dim) if skip else None
        self.use_checkpoint = use_checkpoint

    def forward(self, x, skip=None):
        if self.use_checkpoint:
            return torch.utils.checkpoint.checkpoint(self._forward, x, skip)
        else:
            return self._forward(x, skip)

    def _forward(self, x, skip=None):
        if self.skip_linear is not None:
            x = self.skip_linear(torch.cat([x, skip], dim=-1))
        x = x + self.attn(self.norm1(x))
        x = x + self.mlp(self.norm2(x))
        return x


class PatchEmbed(nn.Module):
    """ Image to Patch Embedding
    """
    def __init__(self, patch_size, in_chans=3, embed_dim=768):
        super().__init__()
        self.patch_size = patch_size
        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size)

    def forward(self, x):
        B, C, H, W = x.shape
        assert H % self.patch_size == 0 and W % self.patch_size == 0
        x = self.proj(x).flatten(2).transpose(1, 2)
        return x


class DIT(nn.Module):
    def __init__(self, num_train_visit, tokenizer, visit_config=None, con_config=None, cluster_config=None, \
                in_chans=3, embed_dim=128, depth=12, num_heads=12, mlp_ratio=4.,
                 qkv_bias=False, qk_scale=None, norm_layer=nn.LayerNorm, mlp_time_embed=False, use_checkpoint=False,
                 contx_dim=128, num_contx_token=9, conv=True, skip=True):
        super().__init__()
        # encode everything config
        self.tokenizer = tokenizer
        self.feature_keys = list(tokenizer.keys())
        self.visit_encoder = VisitEncode(visit_config, tokenizer)
        self.context_encoder = ContextEncoder(con_config, cluster_config, self.feature_keys)

        # cluster的一些配置,e step forward onece a epoch
        self.cluster_config = cluster_config
        self.mode = cluster_config['mode']
        self.k = cluster_config['k']
        # self.cluster_config['dim'] = len(self.feature_keys) * self.cluster_config['dim']
        self.register_buffer("total_visit_emb", torch.randn(num_train_visit, len(self.feature_keys) * cluster_config['dim']))
        # self.register_buffer("visit_2cluster", torch.randn(num_train_visit))
        self.register_buffer("visit_centroids", torch.randn(self.k, len(self.feature_keys) * cluster_config['dim']))

        self.lm_heads = nn.ModuleDict({
            feature_key: nn.Linear(embed_dim, len(tokenizer[feature_key].vocabulary)-2) # label不算pad和unk
            for feature_key in self.feature_keys
        }) # sub pad and unk
        self.logits_mode = visit_config['logits_mode']
        nn.init.xavier_uniform_(self.total_visit_emb)
        nn.init.xavier_uniform_(self.visit_centroids)
        
        # self.apply(self._init_weights)



        #### for rebuttal
        self.context_linear = nn.Linear(embed_dim,embed_dim,bias=True) # mlp；或者attention加一层



        self.num_features = self.embed_dim = embed_dim  # num_features for consistency with other models
        self.in_chans = in_chans

        # self.patch_embed = PatchEmbed(patch_size=patch_size, in_chans=in_chans, embed_dim=embed_dim)
        num_patches = len(self.feature_keys) # 目标

        self.time_embed = nn.Sequential(
            nn.Linear(embed_dim, 4 * embed_dim),
            nn.SiLU(),
            nn.Linear(4 * embed_dim, embed_dim),
        ) if mlp_time_embed else nn.Identity()

        self.context_embed = nn.Linear(contx_dim, embed_dim) # B*77 * 768， 这里是text用clip提取的表征

        self.extras = 1 + num_contx_token # 这个得随着context变化而变化。这里是时间戳和context

        self.pos_embed = nn.Parameter(torch.zeros(1, self.extras + num_patches, embed_dim)) # 3+1+10=14

        self.in_blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                norm_layer=norm_layer, use_checkpoint=use_checkpoint)
            for _ in range(depth // 2)])

        self.mid_block = Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                norm_layer=norm_layer, use_checkpoint=use_checkpoint)

        self.out_blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                norm_layer=norm_layer, skip=skip, use_checkpoint=use_checkpoint)
            for _ in range(depth // 2)])

        self.norm = norm_layer(embed_dim)
        # self.patch_dim = patch_size ** 2 * in_chans
        # self.decoder_pred = nn.Linear(embed_dim, self.patch_dim, bias=True)
        self.decoder_pred = nn.Linear(embed_dim, embed_dim, bias=True)
        # self.final_layer = nn.Conv2d(self.in_chans, self.in_chans, 3, padding=1) if conv else nn.Identity()
        self.final_layer = nn.Linear(embed_dim, embed_dim)

        trunc_normal_(self.pos_embed, std=.02)
        self.apply(self._init_weights)


        # new fornote
        self.note_linear = nn.Linear(768, embed_dim)

    def update_train_visit_emb(self, total_visit_emb_new):
        self.total_visit_emb = total_visit_emb_new # 也可以采用decay更新的方式

    def forward_kmeans(self, total_visit_emb):
        # please note that 这里是all-sample
        device = total_visit_emb.device
        total_visit_emb = total_visit_emb.detach().cpu().numpy()
        kmeans = faiss.Kmeans(d=self.cluster_config['dim'] * len(self.feature_keys), k=self.k, gpu=False) # GPU可能调不动，OOM
        kmeans.train(total_visit_emb)
        cluster_cents = kmeans.centroids

        _, I = kmeans.index.search(total_visit_emb, 1) # B, 1

        # convert to cuda Tensors for broadcast
        centroids = torch.Tensor(cluster_cents).to(device)
        centroids = F.normalize(centroids, p=2, dim=1)

        node2cluster = torch.LongTensor(I).squeeze().to(device)
        return centroids, node2cluster # torch.Size([K, 128]) torch.Size([5808])


    def e_step(self):
        total_visit_emb = self.total_visit_emb.detach() # 一共有多少visit
        self.visit_centroids, self.visit_2cluster = self.forward_kmeans(total_visit_emb) # K,D; Dataset,
        print("Centroids and v2cluster are updated!")
        return self.visit_centroids, self.visit_2cluster

    # def test_e_step(self, all_samples):
    #     """测试的时候, 寻找近邻"""
    #     total_visit_emb = self.total_visit_emb
    #     distances = torch.cdist(all_samples, self.visit_centroids)  # 计算 B x K 的距离矩阵
    #     # 找到每个样本最近的质心索引
    #     self.visit_2cluster = torch.argmin(distances, dim=1)  # 返回 B 的索引


    def update_centroid_emb(self, centroids_new):
        self.context_encoder.cluster.visit_centroids = centroids_new

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Embedding):
            nn.init.normal_(m.weight, std=0.02)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {'pos_embed'}

    def encode_everything(self, indices, **kwargs):
        # print(**kwargs.keys())
        has_note = kwargs['has_note']
        feature_keys = self.feature_keys
        for feature_key in feature_keys:
            kwargs[feature_key] = self.visit_encoder(kwargs[feature_key].unsqueeze(dim=1), kwargs[feature_key + '_mask'].unsqueeze(dim=1), feature_key, aggregate=True) # B,1, M; B,1, M -> B,1,D
            kwargs[feature_key + '_hist'] = self.visit_encoder(kwargs[feature_key + '_hist'], kwargs[feature_key + '_hist'+'_mask'],  feature_key, aggregate=True) # B, K, M; B, K, M -> B, K, D
            kwargs[feature_key + '_comp'] = self.visit_encoder(kwargs[feature_key + '_comp'].unsqueeze(dim=1), kwargs[feature_key + '_comp'+'_mask'].unsqueeze(dim=1), feature_key, aggregate=True) # B,1, M; B,1, M -> B,1,D
        if has_note:
            kwargs['note' + '_hist'] = self.note_linear(kwargs['note' + '_hist'])
            # kwargs['mask'] = kwargs['mask'][:,:-1]

        # 获取x; conditions: [B,1,D] ; conditions_hist: [B,K,D]; conditions_comp: [B,1,D]; mask:B,3; mask_hist: B,K,3
        x = torch.cat([kwargs[feature_key] for feature_key in feature_keys], dim=1) # [B,3,D]

        centroid = self.visit_2cluster[indices] #B, 1
        centroid_emb = self.visit_centroids[centroid] # B, 1, D


        # print("BBBBBBBBBB", x.shape, centroid_emb.shape) # torch.Size([16, 3, 128]) torch.Size([16, 128])

        neigh_loss, context_emb = self.context_encoder(x, centroid_emb, **kwargs) # B,3+3+3,D
        labels = torch.stack([kwargs[feature_key + '_comp'] for feature_key in feature_keys], dim=1) # B,3,D
        hard_labels = {feature_key: kwargs[feature_key + '_comps'] for feature_key in feature_keys} # B,3,M # 这里依旧没有进行-2

        return x, context_emb, neigh_loss, labels, hard_labels


    def get_logits(self, hidden_repr, feature_key):
        """B * D -> B * K"""
        if self.logits_mode == 'linear':
            logits = self.lm_heads[feature_key](hidden_repr)  # B, K， not B*K（无序，这一点不同于序列模型）
            return logits
        elif self.logits_mode == 'cosine':
            text_emb = hidden_repr
            emb_norm = (self.lm_head[feature_key].weight ** 2).sum(-1).view(-1, 1)  # vocab, 1
            text_emb_t = torch.transpose(text_emb.view(-1, text_emb.size(-1)), 0, 1)  # d, B
            arr_norm = (text_emb ** 2).sum(-1).view(-1, 1)  # B, 1
            dist = emb_norm + arr_norm.transpose(0, 1) - 2.0 * torch.mm(self.lm_head[feature_key].weight,
                                                                     text_emb_t)  # (vocab, d) x (d, B)
            scores = torch.sqrt(torch.clamp(dist, 0.0, np.inf)).view(emb_norm.size(0), hidden_repr.size(0),
                                                               hidden_repr.size(1)) # vocab, B
            scores = -scores.permute(1, 2, 0).contiguous()
            return scores

    def encode_everything_test(self, indices, **kwargs):
        # print(**kwargs.keys()),
        has_note = kwargs['has_note']

        feature_keys = self.feature_keys
        for feature_key in feature_keys:
            kwargs[feature_key] = self.visit_encoder(kwargs[feature_key].unsqueeze(dim=1), kwargs[feature_key + '_mask'].unsqueeze(dim=1), feature_key, aggregate=True) # 统一为BVM
            kwargs[feature_key + '_hist'] = self.visit_encoder(kwargs[feature_key + '_hist'], kwargs[feature_key + '_hist'+'_mask'],  feature_key, aggregate=True)
            kwargs[feature_key + '_comp'] = self.visit_encoder(kwargs[feature_key + '_comp'].unsqueeze(dim=1), kwargs[feature_key + '_comp'+'_mask'].unsqueeze(dim=1), feature_key, aggregate=True)
        if has_note:
            kwargs['note' + '_hist'] = self.note_linear(kwargs['note' + '_hist']) # B,V,D


        x = torch.cat([kwargs[feature_key] for feature_key in feature_keys], dim=1) # [B,3,D]

        # centroid = self.visit_2cluster[indices]
        # centroid_emb = self.visit_centroids[centroid]
        distances = torch.cdist(x.view(x.shape[0],-1), self.visit_centroids)  # 计算 B x K 的距离矩阵
        #     # 找到每个样本最近的质心索引
        centroid = torch.argmin(distances, dim=1)  # 返回 B 的索引
        centroid_emb = self.visit_centroids[centroid]

        # print("BBBBBBBBBB", x.shape, centroid_emb.shape) # torch.Size([16, 3, 128]) torch.Size([16, 128])

        neigh_loss, context_emb = self.context_encoder(x, centroid_emb, **kwargs)
        labels = torch.stack([kwargs[feature_key + '_comp'] for feature_key in feature_keys], dim=1)

        hard_labels = {feature_key: kwargs[feature_key + '_comps'] for feature_key in feature_keys}


        return x, context_emb, neigh_loss, labels, hard_labels


    def forward(self, x, timesteps, context): # 这里的context实际上是text对应的embedding
        """
        :param x: B, feature_len, shape
        :param timesteps:  B
        :param context: B , 9, shape
        :return:
        """
        # x = self.patch_embed(x)
        x = x
        B, L, D = x.shape
        time_token = self.time_embed(timestep_embedding(timesteps, self.embed_dim)) # 这里的time可以作为类别特征
        time_token = time_token.unsqueeze(dim=1) # 噪声timestamp
        context_token = self.context_embed(context) # B,9,D
        # context_token = self.context_embed(context)
        # print("KKKKKKK", time_token.shape, context_token.shape, x.shape, self.pos_embed.shape)

        x = torch.cat((time_token, context_token, x), dim=1) # B 1+9+3,D
        x = x + self.pos_embed

        x = self.context_linear(x)

        skips = []
        for blk in self.in_blocks:
            x = blk(x)
            skips.append(x)

        x = self.mid_block(x)

        for blk in self.out_blocks:
            x = blk(x, skips.pop())

        x = self.norm(x)

        x = self.decoder_pred(x) # # B 1+9+3,D
        assert x.size(1) == self.extras + L
        x = x[:, self.extras:, :] # contxt后面的内容
        # x = unpatchify(x, self.in_chans)  # 变成4维度
        x = self.final_layer(x) # B, 3, D

        return x








if __name__ == '__main__':
    print("Hello world")
